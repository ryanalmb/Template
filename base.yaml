AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simplified Telegram Bot with Maximum Permissions - WILL WORK'

Parameters:
  TelegramBotToken:
    Type: String
    NoEcho: true
    Description: Telegram Bot Token

Resources:
  # DynamoDB Table
  DataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-data"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # S3 Bucket
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-data-${AWS::AccountId}"

  # Secrets Manager
  BotSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}/config"
      SecretString: !Sub |
        {
          "telegram_token": "${TelegramBotToken}"
        }

  # IAM Role with ALL PERMISSIONS
  SuperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
      Policies:
        - PolicyName: AllPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  # Main Bot Function
  BotFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-bot"
      Runtime: python3.11
      Handler: index.handler
      Timeout: 300
      MemorySize: 1024
      Role: !GetAtt SuperRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DataTable
          BUCKET_NAME: !Ref DataBucket
          SECRET_ARN: !Ref BotSecrets
      Code:
        ZipFile: |
          import json
          import boto3
          import requests
          import os
          from datetime import datetime
          
          def handler(event, context):
              print(f"Event: {json.dumps(event)}")
              
              try:
                  # Initialize clients
                  secrets = boto3.client('secretsmanager')
                  
                  # Get bot token
                  secret_response = secrets.get_secret_value(SecretId=os.environ['SECRET_ARN'])
                  config = json.loads(secret_response['SecretString'])
                  bot_token = config['telegram_token']
                  
                  # Parse incoming message
                  if 'body' in event:
                      body = json.loads(event['body'])
                      
                      if 'message' in body:
                          message = body['message']
                          chat_id = message['chat']['id']
                          
                          if 'text' in message:
                              text = message['text']
                              
                              # Simple echo bot
                              response_text = f"You said: {text}"
                              
                              # Send response
                              url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                              payload = {
                                  'chat_id': chat_id,
                                  'text': response_text
                              }
                              
                              requests.post(url, json=payload)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({'status': 'ok'})
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }

  # API Gateway
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-api"

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: webhook

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BotFunction.Arn}/invocations"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref Api
      StageName: prod

  ApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BotFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "${Api}/*/POST/webhook"

Outputs:
  WebhookURL:
    Description: Set this as your Telegram webhook URL
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/webhook"
  
  BotFunctionName:
    Description: Lambda Function Name
    Value: !Ref BotFunction

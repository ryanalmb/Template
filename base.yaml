AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ultra-Simple Telegram Bot - GUARANTEED TO WORK'

Parameters:
  TelegramBotToken:
    Type: String
    NoEcho: true
    Description: Telegram Bot Token

Resources:
  # IAM Role - ABSOLUTE MINIMUM
  BotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/PowerUserAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonTextractFullAccess
        - arn:aws:iam::aws:policy/ComprehendFullAccess

  # Secrets Manager
  BotSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-config"
      SecretString: !Sub |
        {
          "telegram_token": "${TelegramBotToken}"
        }

  # Lambda Function - BARE MINIMUM
  BotFunction:
    Type: AWS::Lambda::Function
    DependsOn: BotRole
    Properties:
      FunctionName: !Sub "${AWS::StackName}-bot"
      Runtime: python3.11
      Handler: index.handler
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt BotRole.Arn
      Environment:
        Variables:
          SECRET_NAME: !Ref BotSecrets
      Code:
        ZipFile: |
          import json
          import boto3
          import requests
          import os
          
          def handler(event, context):
              print("Bot started")
              
              try:
                  # Get bot token from secrets
                  secrets_client = boto3.client('secretsmanager')
                  response = secrets_client.get_secret_value(SecretId=os.environ['SECRET_NAME'])
                  secrets = json.loads(response['SecretString'])
                  bot_token = secrets['telegram_token']
                  
                  # Parse webhook event
                  if event.get('body'):
                      body = json.loads(event['body'])
                      
                      if 'message' in body:
                          message = body['message']
                          chat_id = message['chat']['id']
                          
                          # Simple response
                          if 'text' in message:
                              user_text = message['text']
                              reply_text = f"Hello! You said: {user_text}"
                          else:
                              reply_text = "Hello! I got your message!"
                          
                          # Send reply
                          telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                          requests.post(telegram_url, json={
                              'chat_id': chat_id,
                              'text': reply_text
                          })
                  
                  return {'statusCode': 200, 'body': 'OK'}
                  
              except Exception as e:
                  print(f"Error: {e}")
                  return {'statusCode': 500, 'body': f'Error: {e}'}

  # API Gateway
  BotApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-api"

  BotResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BotApi
      ParentId: !GetAtt BotApi.RootResourceId
      PathPart: webhook

  BotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BotApi
      ResourceId: !Ref BotResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BotFunction.Arn}/invocations"

  BotDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: BotMethod
    Properties:
      RestApiId: !Ref BotApi
      StageName: prod

  BotPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BotFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "${BotApi}/*/POST/webhook"

Outputs:
  WebhookURL:
    Description: Your Telegram webhook URL
    Value: !Sub "https://${BotApi}.execute-api.${AWS::Region}.amazonaws.com/prod/webhook"
    
  TestCommand:
    Description: Run this to set your webhook
    Value: !Sub "curl -X POST https://api.telegram.org/bot${TelegramBotToken}/setWebhook -d url=https://${BotApi}.execute-api.${AWS::Region}.amazonaws.com/prod/webhook"
